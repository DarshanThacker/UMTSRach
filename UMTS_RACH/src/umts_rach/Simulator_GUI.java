/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package umts_rach;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author thacker.d
 */
public class Simulator_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Simulator_GUI
     */
    public Simulator_GUI() {
        initComponents();
        setTitle("RACH Simulator - UMTS 1.28 Mcps TDD Network");
        resultJPanel.setVisible(true);
        graphJPanel.setVisible(false);
        graphJPanel2.setVisible(false);
        statusJTextArea.setVisible(false);
        //statusJTextArea.setVisible(false);
        //statusJTextArea.setEditable(false);

        /*    paramJPanel.add(MmaxJTextField);
        paramJPanel.add(NSignaturesJTextField);
        paramJPanel.add(PiJTextField);
        paramJPanel.add(NUpPCHJTextField);
        paramJPanel.add(NFPACHJTextField);
        paramJPanel.add(NPrachToFpachJTextField);
        paramJPanel.add(TTIJTextField);
        paramJPanel.add(WTJTextField);
        paramJPanel.add(PhyTransmissionJTextField);
        paramJPanel.add(LiJTextField);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        toggleButtonGroup = new javax.swing.ButtonGroup();
        paramJPanel = new javax.swing.JPanel();
        titleJLabel = new javax.swing.JLabel();
        MmaxJLabel = new javax.swing.JLabel();
        NsignatureJLabel = new javax.swing.JLabel();
        PiJLabel = new javax.swing.JLabel();
        NUpPCHJLabel = new javax.swing.JLabel();
        NFPACHJLabel = new javax.swing.JLabel();
        NPrachToFpachJabel = new javax.swing.JLabel();
        TTIJLabel = new javax.swing.JLabel();
        WTJLabel = new javax.swing.JLabel();
        MmaxJTextField = new javax.swing.JTextField();
        NSignaturesJTextField = new javax.swing.JTextField();
        setParamJButton = new javax.swing.JButton();
        PhyTransmissionJLabel = new javax.swing.JLabel();
        Li = new javax.swing.JLabel();
        NUpPCHJTextField = new javax.swing.JTextField();
        PiJTextField = new javax.swing.JTextField();
        NFPACHJTextField = new javax.swing.JTextField();
        NPrachToFpachJTextField = new javax.swing.JTextField();
        TTIJTextField = new javax.swing.JTextField();
        WTJTextField = new javax.swing.JTextField();
        PhyTransmissionJTextField = new javax.swing.JTextField();
        LiJTextField = new javax.swing.JTextField();
        defaultParamRadioButton = new javax.swing.JRadioButton();
        manualParamRadioButton = new javax.swing.JRadioButton();
        resultJPanel = new javax.swing.JPanel();
        graphJPanel = new javax.swing.JPanel();
        graphJPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusJTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RACH Simulator - UMTS 1.28 Mcps TDD Network");
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        paramJPanel.setBackground(new java.awt.Color(255, 255, 255));
        paramJPanel.setEnabled(false);

        titleJLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        titleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleJLabel.setText("Parameters");

        MmaxJLabel.setBackground(new java.awt.Color(255, 255, 255));
        MmaxJLabel.setText("Mmax (MAC Layer Tranmission Number)");

        NsignatureJLabel.setBackground(new java.awt.Color(255, 255, 255));
        NsignatureJLabel.setText("Number of signatures");

        PiJLabel.setBackground(new java.awt.Color(255, 255, 255));
        PiJLabel.setText("Transmission Probability (Pi)");

        NUpPCHJLabel.setBackground(new java.awt.Color(255, 255, 255));
        NUpPCHJLabel.setText("Number of Uplink Sub-channels");

        NFPACHJLabel.setBackground(new java.awt.Color(255, 255, 255));
        NFPACHJLabel.setText("Number of FPACH");

        NPrachToFpachJabel.setBackground(new java.awt.Color(255, 255, 255));
        NPrachToFpachJabel.setText("Number of PRACH Associated with FPACH");

        TTIJLabel.setBackground(new java.awt.Color(255, 255, 255));
        TTIJLabel.setText("TTI");

        WTJLabel.setBackground(new java.awt.Color(255, 255, 255));
        WTJLabel.setText("Wait Time");

        MmaxJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MmaxJTextFieldActionPerformed(evt);
            }
        });

        setParamJButton.setText("Set Parameters");
        setParamJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setParamJButtonActionPerformed(evt);
            }
        });

        PhyTransmissionJLabel.setBackground(new java.awt.Color(255, 255, 255));
        PhyTransmissionJLabel.setText("Physical Layer Transmission Number");

        Li.setBackground(new java.awt.Color(255, 255, 255));
        Li.setText("RACH Message Length(Li)");

        defaultParamRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(defaultParamRadioButton);
        defaultParamRadioButton.setText("Select Default Parameters");
        defaultParamRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultParamRadioButtonActionPerformed(evt);
            }
        });

        manualParamRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(manualParamRadioButton);
        manualParamRadioButton.setText("Set Parameters Manually");
        manualParamRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualParamRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paramJPanelLayout = new javax.swing.GroupLayout(paramJPanel);
        paramJPanel.setLayout(paramJPanelLayout);
        paramJPanelLayout.setHorizontalGroup(
            paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramJPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paramJPanelLayout.createSequentialGroup()
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NsignatureJLabel)
                            .addComponent(Li)
                            .addComponent(PhyTransmissionJLabel)
                            .addComponent(WTJLabel)
                            .addComponent(TTIJLabel)
                            .addComponent(NPrachToFpachJabel)
                            .addComponent(NFPACHJLabel)
                            .addComponent(PiJLabel)
                            .addComponent(NUpPCHJLabel)
                            .addComponent(MmaxJLabel))
                        .addGap(6, 6, 6)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhyTransmissionJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(WTJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TTIJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(NUpPCHJTextField)
                            .addComponent(NSignaturesJTextField)
                            .addComponent(MmaxJTextField)
                            .addComponent(PiJTextField)
                            .addComponent(NFPACHJTextField)
                            .addComponent(LiJTextField)
                            .addComponent(NPrachToFpachJTextField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(paramJPanelLayout.createSequentialGroup()
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(defaultParamRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(manualParamRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(setParamJButton)))
                .addGap(42, 42, 42))
            .addGroup(paramJPanelLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(titleJLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        paramJPanelLayout.setVerticalGroup(
            paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paramJPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MmaxJLabel)
                            .addComponent(MmaxJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NsignatureJLabel)
                            .addComponent(NSignaturesJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PiJLabel)
                            .addComponent(PiJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NUpPCHJLabel)
                            .addComponent(NUpPCHJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NFPACHJLabel)
                            .addComponent(NFPACHJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NPrachToFpachJabel)
                            .addComponent(NPrachToFpachJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TTIJLabel)
                            .addComponent(TTIJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WTJLabel)
                            .addComponent(WTJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PhyTransmissionJLabel)
                            .addComponent(PhyTransmissionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(paramJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Li)
                            .addComponent(LiJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(defaultParamRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(manualParamRadioButton))
                    .addGroup(paramJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(setParamJButton)))
                .addContainerGap())
        );

        resultJPanel.setForeground(new java.awt.Color(255, 255, 255));
        resultJPanel.setMaximumSize(new java.awt.Dimension(367, 160));

        javax.swing.GroupLayout resultJPanelLayout = new javax.swing.GroupLayout(resultJPanel);
        resultJPanel.setLayout(resultJPanelLayout);
        resultJPanelLayout.setHorizontalGroup(
            resultJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 367, Short.MAX_VALUE)
        );
        resultJPanelLayout.setVerticalGroup(
            resultJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        graphJPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphJPanelLayout = new javax.swing.GroupLayout(graphJPanel);
        graphJPanel.setLayout(graphJPanelLayout);
        graphJPanelLayout.setHorizontalGroup(
            graphJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
        graphJPanelLayout.setVerticalGroup(
            graphJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        graphJPanel2.setBackground(new java.awt.Color(255, 255, 255));
        graphJPanel2.setPreferredSize(new java.awt.Dimension(520, 236));

        javax.swing.GroupLayout graphJPanel2Layout = new javax.swing.GroupLayout(graphJPanel2);
        graphJPanel2.setLayout(graphJPanel2Layout);
        graphJPanel2Layout.setHorizontalGroup(
            graphJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 510, Short.MAX_VALUE)
        );
        graphJPanel2Layout.setVerticalGroup(
            graphJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        statusJTextArea.setColumns(5);
        statusJTextArea.setLineWrap(true);
        statusJTextArea.setRows(30);
        statusJTextArea.setBorder(null);
        jScrollPane1.setViewportView(statusJTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paramJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(graphJPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paramJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(resultJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(graphJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(graphJPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Properties newProp;

    private boolean isDouble(String st) {
        if (st.equals("")) {
            return false;
        }
        for (int i = 0; i < st.length(); i++) {
            if (!((st.charAt(i) >= '0' && st.charAt(i) <= '9') || st.charAt(i) == '.')) {
                return false;
            }
        }
        return true;
    }

    private boolean isNumber(String st) {
        if (st.equals("")) {
            return false;
        }
        for (int i = 0; i < st.length(); i++) {
            if (!(st.charAt(i) >= '0' && st.charAt(i) <= '9')) {
                return false;
            }
        }
        return true;
    }
    private void MmaxJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MmaxJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MmaxJTextFieldActionPerformed
    static Properties prop;

    static {
        prop = new Properties();
        try {
            InputStream input = new FileInputStream("default_config.properties");
            prop.load(input);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator_GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Simulator_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void defaultParamRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultParamRadioButtonActionPerformed
        // TODO add your handling code here:
        paramJPanel.setVisible(true);
        MmaxJTextField.setText(prop.getProperty("Mmax"));
        NSignaturesJTextField.setText(prop.getProperty("NSignature"));
        PiJTextField.setText(prop.getProperty("Pi"));
        NUpPCHJTextField.setText(prop.getProperty("NUpPCH_Sub"));
        NFPACHJTextField.setText(prop.getProperty("NFPACH"));
        NPrachToFpachJTextField.setText(prop.getProperty("PRACHtoFPACH"));
        TTIJTextField.setText(prop.getProperty("TTI"));
        WTJTextField.setText(prop.getProperty("WT"));
        PhyTransmissionJTextField.setText(prop.getProperty("Phy_Transmission"));
        LiJTextField.setText(prop.getProperty("Li"));
    }//GEN-LAST:event_defaultParamRadioButtonActionPerformed

    private void manualParamRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualParamRadioButtonActionPerformed
        // TODO add your handling code here:
        paramJPanel.setVisible(true);
        MmaxJTextField.setText("");
        NSignaturesJTextField.setText("");
        PiJTextField.setText("");
        NUpPCHJTextField.setText("");
        NFPACHJTextField.setText("");
        NPrachToFpachJTextField.setText("");
        TTIJTextField.setText("");
        WTJTextField.setText("");
        PhyTransmissionJTextField.setText("");
        LiJTextField.setText("");
    }//GEN-LAST:event_manualParamRadioButtonActionPerformed
    private void validateTextFields() {
        if (!isNumber((MmaxJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for Mmax");
            return;
        }
        if (!isNumber((NSignaturesJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for Number of Signatures");
            return;
        }
        if (!isDouble((PiJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for Pi");
            return;
        }
        if (Double.parseDouble(PiJTextField.getText()) > 1) {
            JOptionPane.showMessageDialog(this, "Value of Pi should be less than 1");
            return;
        }
        if (!isNumber((NUpPCHJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for Number of Uplink Sub-channels");
            return;
        }
        if (!isNumber((NFPACHJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for NFPACHJTextField");
            return;
        }
        if (!isNumber((NPrachToFpachJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for NPrachToFpachJTextField");
            return;
        }
        if (!isNumber((TTIJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for TTIJTextField");
            return;
        }
        if (!isNumber((WTJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for TTIJTextField");
            return;
        }
        if (!isNumber((PhyTransmissionJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for PhyTransmissionJTextField");
            return;
        }
        if (!isNumber((LiJTextField.getText()))) {
            JOptionPane.showMessageDialog(this, "Enter Valid Value for LiJTextField");
            return;
        }
        OutputStream out = null;
        newProp = new Properties();
        try {
            out = new FileOutputStream("config.properties");
            newProp.setProperty("Mmax", MmaxJTextField.getText());
            newProp.setProperty("NSignature", NSignaturesJTextField.getText());
            newProp.setProperty("Pi", PiJTextField.getText());
            newProp.setProperty("NUpPCH_Sub", NUpPCHJTextField.getText());
            newProp.setProperty("NFPACH", NFPACHJTextField.getText());
            newProp.setProperty("PRACHtoFPACH", NPrachToFpachJTextField.getText());
            newProp.setProperty("SF", TTIJTextField.getText());
            newProp.setProperty("TTI", TTIJTextField.getText());
            newProp.setProperty("WT", WTJTextField.getText());
            newProp.setProperty("Phy_Transmission", PhyTransmissionJTextField.getText());
            newProp.setProperty("Li", LiJTextField.getText());

            newProp.store(out, null);

        } catch (IOException ie) {
            ie.printStackTrace();
        } finally {
            try {
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    private void setParamJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setParamJButtonActionPerformed
        doWork();
    }//GEN-LAST:event_setParamJButtonActionPerformed

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_formPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulator_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulator_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulator_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulator_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Li;
    private javax.swing.JTextField LiJTextField;
    private javax.swing.JLabel MmaxJLabel;
    private javax.swing.JTextField MmaxJTextField;
    private javax.swing.JLabel NFPACHJLabel;
    private javax.swing.JTextField NFPACHJTextField;
    private javax.swing.JTextField NPrachToFpachJTextField;
    private javax.swing.JLabel NPrachToFpachJabel;
    private javax.swing.JTextField NSignaturesJTextField;
    private javax.swing.JLabel NUpPCHJLabel;
    private javax.swing.JTextField NUpPCHJTextField;
    private javax.swing.JLabel NsignatureJLabel;
    private javax.swing.JLabel PhyTransmissionJLabel;
    private javax.swing.JTextField PhyTransmissionJTextField;
    private javax.swing.JLabel PiJLabel;
    private javax.swing.JTextField PiJTextField;
    private javax.swing.JLabel TTIJLabel;
    private javax.swing.JTextField TTIJTextField;
    private javax.swing.JLabel WTJLabel;
    private javax.swing.JTextField WTJTextField;
    private javax.swing.JRadioButton defaultParamRadioButton;
    private javax.swing.JPanel graphJPanel;
    private javax.swing.JPanel graphJPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton manualParamRadioButton;
    private javax.swing.JPanel paramJPanel;
    private javax.swing.ButtonGroup radioButtonGroup;
    private javax.swing.JPanel resultJPanel;
    private javax.swing.JButton setParamJButton;
    private javax.swing.JTextArea statusJTextArea;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.ButtonGroup toggleButtonGroup;
    // End of variables declaration//GEN-END:variables
    JTable resultTable = null;
    JScrollPane sp = null;
    private void DrawGraphSetResult() {
        
//    resultJPanel.setVisible(true);
        UMTS_RACH backGround = new UMTS_RACH(statusJTextArea);
        int nUser[] = {100, 200, 300, 400, 500, 600, 700, 800};
        String rows[][] = new String[nUser.length][3];
        String heading[] = {"UE", "Collision", "Access Success"};

        DecimalFormat df2 = new DecimalFormat(".##");
        DefaultCategoryDataset dataSetCollision = new DefaultCategoryDataset();
        DefaultCategoryDataset dataSetAS = new DefaultCategoryDataset();
        SimulationResult sr = null;
        for (int i = 0; i < nUser.length; i++) {
            sr = backGround.startExperiment(nUser[i], 1);
            dataSetCollision.addValue(sr.collision, "time = 1 s", String.valueOf(nUser[i]));
            dataSetAS.addValue(sr.accessSuccess, "time = 1 s", String.valueOf(nUser[i]));
            rows[i][0] = String.valueOf(nUser[i]);
            rows[i][1] = df2.format(sr.collision);
            rows[i][2] = df2.format(sr.accessSuccess);
        }
        Dimension d;
        if(resultTable == null){
            resultJPanel.setBackground(Color.WHITE);
            resultJPanel.setLayout(new FlowLayout());
            resultTable = new JTable(rows, heading);
        
            sp = new JScrollPane(resultTable);
            sp.setPreferredSize(resultJPanel.getSize());
        //    resultTable.setFillsViewportHeight(true);
            resultJPanel.add(sp);
            resultTable.setEnabled(false);
        }
        else{
            d = sp.getSize();
            resultJPanel.remove(sp);
            resultTable = new JTable(rows, heading);
            sp = new JScrollPane(resultTable);
            sp.setPreferredSize(d);
        //    resultTable.setFillsViewportHeight(true);
            resultJPanel.add(sp);
            resultTable.setEnabled(false);
        }
        
        
        //    sp.setSize(100, 100);
       
        

        //Drawing collision vs. Number of UE
        GraphDisplay chart = new GraphDisplay(
                "Collision vs Number of UE", "Collision", "Number of UE", new Dimension(520, 226));
        graphJPanel.setLayout(new FlowLayout());
        graphJPanel.add(chart.getContent(dataSetCollision));
        graphJPanel.setVisible(true);

        //Drawing Access Success vs. Number of UE
        chart = new GraphDisplay(
                "Access Success vs Number of UE", "Access Success", "Number of UE", new Dimension(520, 226));
        graphJPanel2.setLayout(new FlowLayout());
        graphJPanel2.add(chart.getContent(dataSetAS));
        graphJPanel2.setVisible(true);
        revalidate();
    }

    private void doWork() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
            @Override
            protected Void doInBackground() throws Exception {
                setParamJButton.setEnabled(false);
                graphJPanel.removeAll();
                graphJPanel2.removeAll();
                validateTextFields();
                DrawGraphSetResult();
                setParamJButton.setEnabled(true);
                return null;
            }

            protected void process() {
                // status.setText("print " + chunks.get(chunks.size() - 1).toString());
                // status.setText(chunks.get(chunks.size() - 1).toString());
            }

            protected void done() {
                //status.setText("Done" + status.getText() + "\n");
                //after done
            }
        };

        worker.execute();

    }
}
